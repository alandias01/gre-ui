{"version":3,"sources":["reportWebVitals.ts","components/wordCard.tsx","services/api.ts","components/ShowWords.tsx","components/main.tsx","utils/ListItemLink.tsx","components/TopBar.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStylesWordCard","makeStyles","root","minWidth","maxWidth","height","borderRadius","borderTopStyle","borderTopColor","WordCard","props","classes","Card","className","CardContent","Typography","color","gutterBottom","heading","variant","component","word","type","definition","CardActions","Button","size","baseUrl","api","getWords","fetch","response","clone","json","getwordsCount","getlists","getuserlists","email","getUserListsDistinct","useStylesShowWords","largeIcon","width","ShowWords","ListName","Email","useState","paginationCount","setPaginationCount","paginationPage","words","setWords","wordsToShow","setWordsToShow","useEffect","data","Math","floor","length","displayWords","catch","err","console","log","page","startIndex","endIndex","slice","Grid","container","spacing","map","x","index","item","xs","sm","Pagination","showFirstButton","showLastButton","count","siblingCount","onChange","event","Main","query","URLSearchParams","useLocation","search","path","get","ListItemLink","icon","primary","to","secondary","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","useStylesTopBar","theme","menuButton","marginRight","title","flexGrow","bgColor","background","drawer","drawerHeader","display","alignItems","justifyContent","accountDrawer","accountDrawerHeader","TopBar","isDrawerOpen","setIsDrawerOpen","toggleDrawerOpen","isAccountDrawerOpen","setIsAccountDrawerOpen","toggleAccountDrawerOpen","onClick","AppBar","position","Toolbar","IconButton","edge","aria-label","Drawer","paper","anchor","open","Divider","List","createMuiTheme","palette","SW","ThemeProvider","CssBaseline","Container","style","marginTop","ReactDOM","render","document","getElementById"],"mappings":"8KAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gHCARQ,EAAoBC,YAAW,CACjCC,KAAM,CACFC,SAAU,IACVC,SAAU,IACVC,OAAQ,IACRC,aAAc,EACdC,eAAgB,QAChBC,eAAgB,YAWjB,SAASC,EAASC,GACrB,IAAMC,EAAUX,IAChB,OACI,eAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQT,KAAzB,UACI,eAACY,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,SACKP,EAAMQ,UAEX,cAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,KAAnC,SACKV,EAAMW,OAEX,cAACN,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SACKN,EAAMY,OAEX,cAACP,EAAA,EAAD,CAAYI,QAAQ,QAAQC,UAAU,IAAtC,SACKV,EAAMa,gBAGf,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,KAAK,QAAb,6BC9ChB,IAAMC,EAAU,6BAcDC,EAbH,CACVC,SAAUC,MAAM,GAAD,OAAIH,EAAJ,aAAuBjC,MAAK,SAACqC,GAAD,OACzCA,EAASC,QAAQC,UAEnBC,cAAeJ,MAAM,GAAD,OAAIH,EAAJ,kBACpBQ,SAAUL,MAAM,GAAD,OAAIH,EAAJ,aACfS,aAAc,SAACC,GAAD,OACZP,MAAM,GAAD,OAAIH,EAAJ,8BAAiCU,IAAS3C,MAAK,SAACqC,GAAD,OAClDA,EAASC,QAAQC,WAErBK,qBAAsBR,MAAM,GAAD,OAAIH,EAAJ,0BCSvBY,EAAqBtC,YAAW,CACpCuC,UAAW,CACTC,MAAO,IACPpC,OAAQ,OAIL,SAASqC,EAAUhC,GACR6B,IACY7B,EAApBiC,SADR,IACkBC,EAAUlC,EAAVkC,MAF8B,EAIFC,mBAAiB,GAJf,mBAIzCC,EAJyC,KAIxBC,EAJwB,OAKJF,qBALI,mBAKzCG,EALyC,aAMtBH,mBAAkB,KANI,mBAMzCI,EANyC,KAMlCC,EANkC,OAOVL,mBAAkB,IAPR,mBAOzCM,EAPyC,KAO5BC,EAP4B,KAShDC,qBAAU,WAGJT,EACFhB,EAAIQ,aAAaQ,GAAOlD,MAAK,SAAC4D,GAC5BJ,EAASI,GACTP,EAAmBQ,KAAKC,MAAMF,EAAKG,OAZL,GAYqC,GACnEC,EAAa,MACZC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAG9BhC,EAAIC,SACDnC,MAAK,SAAC4D,GACLJ,EAASI,GACTP,EAAmBQ,KAAKC,MAAMF,EAAKG,OApBP,GAoBuC,GACnEC,EAAa,QAGlB,CAACZ,IAEJ,IAGMY,EAAe,SAACK,GACpB,IAAMC,EA9B4B,GA8BdD,EAAO,GACrBE,EAAWD,EA/BiB,EAgC5BV,EAAOL,EAAMiB,MAAMF,EAAYC,GACrCb,EAAeE,IAGjB,OACE,gCACE,cAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACGlB,EAAYmB,KAAI,SAACC,EAAGC,GAAJ,OACf,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,OAAvB,SACE,cAAClE,EAAD,CAAUY,KAAMkD,EAAElD,KAAME,WAAYgD,EAAEhD,cADJiD,QAKxC,cAACI,EAAA,EAAD,CACEC,iBAAe,EACfC,gBAAc,EACdC,MAAOjC,EACPiB,KAAMf,EACNgC,aAAc,EACdtD,KAAK,QACLuD,SA1BmB,SAACC,EAAmCnB,GAApC,OACvBL,EAAaK,SClDV,SAASoB,IACZ,IAAIC,EAJG,IAAIC,gBAAgBC,cAAcC,QAKzC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,aAAZ,uBAGA,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACI,cAAC9C,EAAD,CAAWE,MAAOwC,EAAMK,IAAI,aAEhC,cAAC,IAAD,CAAOD,KAAK,aAAZ,uBAGA,cAAC,IAAD,CAAOA,KAAK,cAAZ,wBAGA,cAAC,IAAD,CAAOA,KAAK,iBAAZ,2BAGA,cAAC,IAAD,CAAOA,KAAK,YAAZ,sBAGA,cAAC,IAAD,CAAOA,KAAK,WAAZ,qBAGA,cAAC,IAAD,CAAOA,KAAK,IAAZ,qB,oNCnBL,SAASE,EAAahF,GAA2B,IAC5CiF,EAAiCjF,EAAjCiF,KAAMC,EAA2BlF,EAA3BkF,QAASC,EAAkBnF,EAAlBmF,GAAIC,EAAcpF,EAAdoF,UAErBC,EAAaC,IAAMC,SACrB,kBACID,IAAME,YAA6C,SAACC,EAAWC,GAAZ,OAC/C,cAAC,IAAD,aAAYP,GAAIA,EAAIO,IAAKA,GAASD,SAE1C,CAACN,IAGL,OACI,6BACI,eAACQ,EAAA,EAAD,CAAUC,QAAM,EAAClF,UAAW2E,EAA5B,UACKJ,EAAO,cAACY,EAAA,EAAD,UAAeZ,IAAuB,KAC9C,cAACa,EAAA,EAAD,CAAcZ,QAASA,EAASE,UAAWA,SClB3D,IAAMW,GAAkBxG,aAAW,SAACyG,GAAD,MAAmB,CAClDC,WAAY,CACRC,YAAaF,EAAMrC,QAAQ,IAE/BwC,MAAO,CACHC,SAAU,GAEdC,QAAS,CACLC,WAAY,SAEhBC,OAAQ,CAAExE,MAAO,KACjByE,aAAc,CACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,YAEpBC,cAAe,CAAE7E,MAAO,KACxB8E,oBAAqB,CACjBJ,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAIjB,SAASG,KACZ,IAAM7G,EAAU8F,KADK,EAEmB5D,oBAAS,GAF5B,mBAEd4E,EAFc,KAEAC,EAFA,KAGfC,EAAmB,kBAAMD,GAAiBD,IAH3B,EAKiC5E,oBAAS,GAL1C,mBAKd+E,EALc,KAKOC,EALP,KAMfC,EAA0B,kBAAMD,GAAwBD,IAM9D,OACI,sBAAKG,QANiB,WACtBN,GAAgBC,GAAgB,GAChCE,GAAuBC,GAAuB,IAI9C,UACI,cAACG,EAAA,EAAD,CAAQC,SAAS,SAASpH,UAAWF,EAAQoG,QAA7C,SACI,eAACmB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQvH,UAAWF,EAAQgG,WAAY3F,MAAM,UAAUqH,aAAW,OAAON,QAASJ,EAAnG,SACI,cAAC,IAAD,MAEJ,cAAC5G,EAAA,EAAD,CAAYI,QAAQ,KAAKN,UAAWF,EAAQkG,MAA5C,sBAGA,cAACsB,EAAA,EAAD,CAAYJ,QAASD,EAArB,SACI,cAAC,IAAD,WAIZ,eAACQ,EAAA,EAAD,CAAQ3H,QAAS,CAAE4H,MAAO5H,EAAQsG,QAAUpG,UAAWF,EAAQsG,OAAQuB,OAAQ,OAAQC,KAAMhB,EAA7F,UACI,qBAAK5G,UAAWF,EAAQuG,aAAxB,SACI,cAACiB,EAAA,EAAD,CAAYJ,QAASJ,EAArB,SACI,cAAC,IAAD,QAGR,cAACe,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,WACI,cAACjD,EAAD,CAAcG,GAAG,aAAaD,QAAQ,cACtC,cAACF,EAAD,CAAcG,GAAG,aAAaD,QAAQ,eACtC,cAACF,EAAD,CAAcG,GAAG,aAAaD,QAAQ,eACtC,cAAC8C,EAAA,EAAD,IACA,cAAChD,EAAD,CAAcG,GAAG,cAAcD,QAAQ,gBACvC,cAACF,EAAD,CAAcG,GAAG,iBAAiBD,QAAQ,sBAIlD,eAAC0C,EAAA,EAAD,CAAQ3H,QAAS,CAAE4H,MAAO5H,EAAQ2G,eAAiBzG,UAAWF,EAAQ2G,cAAekB,OAAQ,QAASC,KAAMb,EAA5G,UACI,qBAAK/G,UAAWF,EAAQ4G,oBAAxB,SACI,cAACY,EAAA,EAAD,CAAYJ,QAASD,EAArB,SACI,cAAC,IAAD,QAGR,cAACY,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,WACI,cAACjD,EAAD,CAAcG,GAAG,YAAYD,QAAQ,WAAWD,KAAM,cAAC,IAAD,MACtD,cAACD,EAAD,CAAcG,GAAG,WAAWD,QAAQ,UAAUD,KAAM,cAAC,IAAD,eC5ExE,IAAMe,GAAQkC,YAAe,CAC3BC,QAAS,CACPvH,KAAM,UAIJwH,GAAK,kBACT,eAACC,EAAA,EAAD,CAAerC,MAAOA,GAAtB,UACE,cAACsC,EAAA,EAAD,IACA,eAAC,IAAD,WACE,cAACxB,GAAD,IACA,cAACyB,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,QAA/B,SACE,cAAChE,EAAD,aAQRiE,IAASC,OAAO,cAAC,GAAD,IAAQC,SAASC,eAAe,SAKhDhK,M","file":"static/js/main.ab8e610c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStylesWordCard = makeStyles({\r\n    root: {\r\n        minWidth: 300,\r\n        maxWidth: 300,\r\n        height: 200,\r\n        borderRadius: 0,\r\n        borderTopStyle: \"solid\",\r\n        borderTopColor: \"orange\"\r\n    }\r\n});\r\n\r\ninterface IWordCardProps {\r\n    heading?: string,\r\n    word: string,\r\n    definition: string,\r\n    type?: string\r\n}\r\n\r\nexport function WordCard(props: IWordCardProps) {\r\n    const classes = useStylesWordCard();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    {props.heading}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    {props.word}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                    {props.type}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {props.definition}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\">Learn More</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}","const baseUrl = \"https://alanswork.com/api/\";\r\nconst api = {\r\n  getWords: fetch(`${baseUrl}getwords`).then((response) =>\r\n    response.clone().json()\r\n  ),\r\n  getwordsCount: fetch(`${baseUrl}getwordsCount`),\r\n  getlists: fetch(`${baseUrl}getlists`),\r\n  getuserlists: (email: string) =>\r\n    fetch(`${baseUrl}getuserlists?email=${email}`).then((response) =>\r\n      response.clone().json()\r\n    ),\r\n  getUserListsDistinct: fetch(`${baseUrl}getUserListsDistinct`),\r\n};\r\n\r\nexport default api;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Hidden, makeStyles, IconButton } from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport { WordCard } from \"./wordCard\";\r\nimport api from \"../services/api\";\r\nimport { getConfigFileParsingDiagnostics } from \"typescript\";\r\n\r\ninterface IShowWordsProps {\r\n  Email?: string;\r\n  ListName?: string;\r\n}\r\n\r\ninterface IWord {\r\n  word: string;\r\n  definition: string;\r\n  type: string;\r\n}\r\n\r\nconst useStylesShowWords = makeStyles({\r\n  largeIcon: {\r\n    width: 350,\r\n    height: 150,\r\n  },\r\n});\r\n\r\nexport function ShowWords(props: IShowWordsProps) {\r\n  const classes = useStylesShowWords();\r\n  const { ListName, Email } = props;\r\n  const numberOfWordsToShow: number = 6;\r\n  const [paginationCount, setPaginationCount] = useState<number>(0);\r\n  const [paginationPage, setPaginationPage] = useState<number>();\r\n  const [words, setWords] = useState<IWord[]>([]);\r\n  const [wordsToShow, setWordsToShow] = useState<IWord[]>([]);\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    if (Email) {\r\n      api.getuserlists(Email).then((data) => {\r\n        setWords(data);\r\n        setPaginationCount(Math.floor(data.length / numberOfWordsToShow) + 1);\r\n        displayWords(1);\r\n      }).catch((err) => console.log(err));\r\n    }\r\n    else {\r\n      api.getWords\r\n        .then((data: IWord[]) => {\r\n          setWords(data);\r\n          setPaginationCount(Math.floor(data.length / numberOfWordsToShow) + 1);\r\n          displayWords(1);\r\n        });\r\n    }\r\n  }, [paginationCount]);\r\n\r\n  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) =>\r\n    displayWords(page);\r\n\r\n  const displayWords = (page: number) => {\r\n    const startIndex = (page - 1) * numberOfWordsToShow;\r\n    const endIndex = startIndex + numberOfWordsToShow;\r\n    const data = words.slice(startIndex, endIndex);\r\n    setWordsToShow(data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        {wordsToShow.map((x, index) => (\r\n          <Grid item xs={12} sm={\"auto\"} key={index}>\r\n            <WordCard word={x.word} definition={x.definition} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Pagination\r\n        showFirstButton\r\n        showLastButton\r\n        count={paginationCount}\r\n        page={paginationPage}\r\n        siblingCount={3}\r\n        size=\"small\"\r\n        onChange={handlePageChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Switch, Route, useLocation } from 'react-router-dom';\r\nimport { ShowWords } from './ShowWords';\r\n\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport function Main() {\r\n    let query = useQuery();\r\n    return (\r\n        <Switch>\r\n            <Route path='/dashboard' >\r\n                dashboard\r\n            </Route>\r\n            <Route path='/showwords' >\r\n                <ShowWords Email={query.get(\"email\")!} />\r\n            </Route>\r\n            <Route path='/showlists' >\r\n                showlists\r\n            </Route>\r\n            <Route path='/createlist' >\r\n                createlist\r\n            </Route>\r\n            <Route path='/addwordtolist' >\r\n                addwordtolist\r\n            </Route>\r\n            <Route path='/settings' >\r\n                settings\r\n            </Route>\r\n            <Route path='/account' >\r\n                account\r\n            </Route>\r\n            <Route path='/' >\r\n                Main\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    secondary?: string;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nexport function ListItemLink(props: ListItemLinkProps) {\r\n    const { icon, primary, to, secondary } = props;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <ListItemText primary={primary} secondary={secondary} />\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles, Theme, Drawer, List, Divider } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport AccountIcon from '@material-ui/icons/AccountCircle'\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport { ListItemLink } from '../utils/ListItemLink';\r\n\r\nconst useStylesTopBar = makeStyles((theme: Theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    bgColor: {\r\n        background: 'black'\r\n    },\r\n    drawer: { width: 250 },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    accountDrawer: { width: 200 },\r\n    accountDrawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    }\r\n}));\r\n\r\nexport function TopBar() {\r\n    const classes = useStylesTopBar();\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n    const toggleDrawerOpen = () => setIsDrawerOpen(!isDrawerOpen);\r\n\r\n    const [isAccountDrawerOpen, setIsAccountDrawerOpen] = useState(false);\r\n    const toggleAccountDrawerOpen = () => setIsAccountDrawerOpen(!isAccountDrawerOpen);\r\n    const handleDrawerClose = () => {\r\n        isDrawerOpen && setIsDrawerOpen(false);\r\n        isAccountDrawerOpen && setIsAccountDrawerOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleDrawerClose}>\r\n            <AppBar position=\"static\" className={classes.bgColor}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawerOpen}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        GRE Tool\r\n                    </Typography>\r\n                    <IconButton onClick={toggleAccountDrawerOpen}>\r\n                        <AccountIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer classes={{ paper: classes.drawer }} className={classes.drawer} anchor={\"left\"} open={isDrawerOpen}  >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={toggleDrawerOpen}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItemLink to=\"/dashboard\" primary=\"Dashboard\" />\r\n                    <ListItemLink to=\"/showwords\" primary=\"Show Words\" />\r\n                    <ListItemLink to=\"/showlists\" primary=\"Show Lists\" />\r\n                    <Divider />\r\n                    <ListItemLink to=\"/createlist\" primary=\"Create List\" />\r\n                    <ListItemLink to=\"/addwordtolist\" primary=\"Add to List\" />\r\n\r\n                </List>\r\n            </Drawer>\r\n            <Drawer classes={{ paper: classes.accountDrawer }} className={classes.accountDrawer} anchor={\"right\"} open={isAccountDrawerOpen}  >\r\n                <div className={classes.accountDrawerHeader}>\r\n                    <IconButton onClick={toggleAccountDrawerOpen}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItemLink to=\"/settings\" primary=\"Settings\" icon={<SettingsIcon />} />\r\n                    <ListItemLink to=\"/account\" primary=\"Account\" icon={<LockIcon />} />\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createMuiTheme, CssBaseline } from '@material-ui/core'\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { Main } from './components/main'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Container } from '@material-ui/core';\r\nimport { TopBar } from './components/TopBar';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  },\r\n});\r\n\r\nconst SW = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <BrowserRouter>\r\n      <TopBar />\r\n      <Container style={{ marginTop: \"20px\" }}>\r\n        <Main />\r\n      </Container>\r\n    </BrowserRouter>\r\n\r\n  </ThemeProvider>\r\n);\r\n\r\n\r\nReactDOM.render(<SW />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}