{"version":3,"sources":["reportWebVitals.ts","components/wordCard.tsx","services/api.ts","components/ShowWords.tsx","components/ShowLists.tsx","components/login.tsx","components/main.tsx","utils/ListItemLink.tsx","components/TopBar.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStylesWordCard","makeStyles","root","minWidth","maxWidth","height","borderRadius","borderTopStyle","borderTopColor","WordCard","props","classes","Card","className","CardActionArea","onClick","clickContent","word","definition","CardContent","Typography","color","gutterBottom","heading","variant","component","type","CardActions","Button","size","baseUrl","apikeys","accessToken","undefined","api","getWords","fetch","response","clone","json","getwordsCount","getlists","getuserlists","list","headers","Authorization","getUserListsDistinct","distinctField","login","email","password","method","body","JSON","stringify","getUserListCount","useStylesShowWords","largeIcon","width","ShowWords","listName","useState","paginationCount","setPaginationCount","paginationPage","words","setWords","wordsToShow","setWordsToShow","useEffect","data","Math","floor","length","displayWords","catch","err","console","log","page","startIndex","endIndex","slice","Grid","container","spacing","map","x","index","item","xs","sm","Pagination","showFirstButton","showLastButton","count","siblingCount","onChange","event","useStylesShowLists","ShowLists","userLists","setUserLists","userListsToShow","setUserListsToShow","error","setError","listToGoto","setListToGoto","data1","displayLists","to","handleWordCardClick","p","_id","toString","Login","setEmail","setPassword","isLoggedIn","isError","loginStatus","setLoginStatus","handleSubmit","res","token","e","submitEnabled","TextField","style","margin","label","name","value","target","required","autoFocus","onKeyDown","key","disabled","Main","query","URLSearchParams","useLocation","search","path","get","ListItemLink","icon","primary","secondary","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","ListItemIcon","ListItemText","useStylesTopBar","theme","menuButton","marginRight","title","flexGrow","bgColor","background","drawer","drawerHeader","display","alignItems","justifyContent","accountDrawer","accountDrawerHeader","TopBar","isDrawerOpen","setIsDrawerOpen","toggleDrawerOpen","isAccountDrawerOpen","setIsAccountDrawerOpen","toggleAccountDrawerOpen","AppBar","position","Toolbar","IconButton","edge","aria-label","Drawer","paper","anchor","open","Divider","List","createMuiTheme","palette","SW","ThemeProvider","CssBaseline","Container","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26067bbe.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStylesWordCard = makeStyles({\r\n    root: {\r\n        minWidth: 300,\r\n        maxWidth: 300,\r\n        height: 200,\r\n        borderRadius: 0,\r\n        borderTopStyle: \"solid\",\r\n        borderTopColor: \"orange\"\r\n    }\r\n});\r\n\r\nexport interface IWordCardProps {\r\n    heading?: string,\r\n    word: string,\r\n    definition: string,\r\n    type?: string,\r\n    clickContent?: (e: IWordCardProps) => void\r\n}\r\n\r\nexport function WordCard(props: IWordCardProps) {\r\n    const classes = useStylesWordCard();\r\n    const handleClick = () => {\r\n        props.clickContent && props.clickContent({ word: props.word, definition: props.definition });\r\n    }\r\n    return (\r\n        <Card className={classes.root} >\r\n            <CardActionArea onClick={handleClick} >\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                        {props.heading}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {props.word}\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                        {props.type}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {props.definition}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\">Learn More</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}","//const baseUrl = \"https://alanswork.com/api/\";\r\nconst baseUrl = \"http://localhost:3001/api/\";\r\nexport const apikeys = { accessToken: undefined };\r\n\r\nconst authHeader = () => `Authorization: Bearer ${apikeys.accessToken}`;\r\n\r\nconst api = {\r\n  getWords: fetch(`${baseUrl}getwords`).then((response) => response.clone().json()),\r\n  getwordsCount: fetch(`${baseUrl}getwordsCount`),\r\n  getlists: fetch(`${baseUrl}getlists`),\r\n  getuserlists: (list: string) =>\r\n    fetch(`${baseUrl}getuserlists?list=${list}`, {\r\n      headers: { Authorization: `Bearer ${apikeys.accessToken}` },\r\n    }).then((response) => response.clone().json()),\r\n  getUserListsDistinct: (distinctField: string) =>\r\n    fetch(`${baseUrl}getUserListsDistinct?distinctfield=${distinctField}`, {\r\n      headers: { Authorization: `Bearer ${apikeys.accessToken}` },\r\n    }).then((response) => response.clone().json()),\r\n  login: (email: string, password: string) =>\r\n    fetch(`${baseUrl}login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    }).then((response) => response.clone().json()),\r\n  getUserListCount: () =>\r\n    fetch(`${baseUrl}getUserListCount`, {\r\n      headers: { Authorization: `Bearer ${apikeys.accessToken}` },\r\n    }).then((response) => response.clone().json()),\r\n};\r\n\r\nexport default api;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Hidden, makeStyles, IconButton } from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport { WordCard } from \"./wordCard\";\r\nimport api from \"../services/api\";\r\n\r\ninterface IWord {\r\n  word: string;\r\n  definition: string;\r\n  type: string;\r\n}\r\n\r\nconst useStylesShowWords = makeStyles({\r\n  largeIcon: {\r\n    width: 350,\r\n    height: 150,\r\n  },\r\n});\r\n\r\nexport function ShowWords({ listName }: { listName?: string }) {\r\n  const classes = useStylesShowWords();\r\n\r\n  const numberOfWordsToShow: number = 6;\r\n  const [paginationCount, setPaginationCount] = useState<number>(0);\r\n  const [paginationPage, setPaginationPage] = useState<number>();\r\n  const [words, setWords] = useState<IWord[]>([]);\r\n  const [wordsToShow, setWordsToShow] = useState<IWord[]>([]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (listName) {\r\n      api.getuserlists(listName).then((data) => {\r\n        setWords(data);\r\n        setPaginationCount(Math.floor(data.length / numberOfWordsToShow) + 1);\r\n        displayWords(1);\r\n      }).catch((err) => console.log(err));\r\n    }\r\n    else {\r\n      api.getWords\r\n        .then((data: IWord[]) => {\r\n          setWords(data);\r\n          setPaginationCount(Math.floor(data.length / numberOfWordsToShow) + 1);\r\n          displayWords(1);\r\n        });\r\n    }\r\n  }, [paginationCount]);\r\n\r\n  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) =>\r\n    displayWords(page);\r\n\r\n  const displayWords = (page: number) => {\r\n    const startIndex = (page - 1) * numberOfWordsToShow;\r\n    const endIndex = startIndex + numberOfWordsToShow;\r\n    const data = words.slice(startIndex, endIndex);\r\n    setWordsToShow(data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        {wordsToShow.map((x, index) => (\r\n          <Grid item xs={12} sm={\"auto\"} key={index}>\r\n            <WordCard word={x.word} definition={x.definition} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Pagination\r\n        showFirstButton\r\n        showLastButton\r\n        count={paginationCount}\r\n        page={paginationPage}\r\n        siblingCount={3}\r\n        size=\"small\"\r\n        onChange={handlePageChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Grid, Hidden, makeStyles, IconButton } from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport { WordCard, IWordCardProps } from \"./wordCard\";\r\nimport api from \"../services/api\";\r\n\r\ntype IUserList = { _id: string, count: number };\r\n\r\nconst useStylesShowLists = makeStyles({\r\n\r\n});\r\n\r\nexport function ShowLists() {\r\n  const classes = useStylesShowLists();\r\n  const numberOfItemsToShow: number = 6;\r\n  const [paginationCount, setPaginationCount] = useState<number>(0);\r\n  const [paginationPage, setPaginationPage] = useState<number>();\r\n  const [userLists, setUserLists] = useState<IUserList[]>([]);\r\n  const [userListsToShow, setUserListsToShow] = useState<IUserList[]>([]);\r\n  const [error, setError] = useState(false);\r\n  const [listToGoto, setListToGoto] = useState<string | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n\r\n    api.getUserListCount().then((data) => {\r\n\r\n      console.log(data);\r\n      setError(false);\r\n      setUserLists(data);\r\n      setPaginationCount(Math.floor(data.length / numberOfItemsToShow) + 1);\r\n      const startIndex = (1 - 1) * numberOfItemsToShow;\r\n      const endIndex = startIndex + numberOfItemsToShow;\r\n      const data1 = data.slice(startIndex, endIndex);\r\n      setUserListsToShow(data1);\r\n\r\n    }).catch((err) => {\r\n      console.log(err);\r\n      setError(true);\r\n    });\r\n\r\n  }, []);\r\n\r\n  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => displayLists(page);\r\n\r\n  const displayLists = (page: number) => {\r\n    const startIndex = (page - 1) * numberOfItemsToShow;\r\n    const endIndex = startIndex + numberOfItemsToShow;\r\n    const data = userLists.slice(startIndex, endIndex);\r\n    setUserListsToShow(data);\r\n  };\r\n\r\n  if (listToGoto)\r\n    return <Redirect to={'/showwords?listname=' + listToGoto} />\r\n\r\n  const handleWordCardClick = (p: IWordCardProps) => setListToGoto(p.word);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        {error && 'You need to log in'}\r\n        {userListsToShow.map((x, index) => (\r\n          <Grid item xs={12} sm={\"auto\"} key={index}>\r\n            <WordCard word={x._id} definition={x.count.toString()} clickContent={handleWordCardClick} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Pagination\r\n        showFirstButton\r\n        showLastButton\r\n        count={paginationCount}\r\n        page={paginationPage}\r\n        siblingCount={3}\r\n        size=\"small\"\r\n        onChange={handlePageChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, TextField, Grid, Paper, AppBar, Typography, Toolbar, Link, } from \"@material-ui/core\";\r\nimport api, { apikeys } from \"../services/api\";\r\n\r\ntype ILoginStatus = { isLoggedIn: boolean, isError: boolean, error: Error | undefined };\r\n\r\nexport const Login = () => {\r\n  const [email, setEmail] = useState('a@a.com');\r\n  const [password, setPassword] = useState('');\r\n  const [loginStatus, setLoginStatus] = useState<ILoginStatus>({ isLoggedIn: false, isError: false, error: undefined });\r\n  const handleSubmit = () => {\r\n    api.login(email, password).then(res => {\r\n      const { token } = res;\r\n      setLoginStatus(e => ({ isLoggedIn: true, isError: false, error: undefined }));\r\n      apikeys.accessToken = token;\r\n      console.log(token);\r\n\r\n    }).catch((e) => {\r\n      setLoginStatus({ isLoggedIn: false, isError: true, error: e });\r\n    })\r\n  };\r\n\r\n  if (loginStatus.isLoggedIn)\r\n    return <Redirect to='/showlists' />\r\n\r\n  const submitEnabled = () => !(email && password);\r\n\r\n  const handlePasswordKeyDown: React.KeyboardEventHandler = (e) => { e.key === 'Enter' && submitEnabled && handleSubmit() }\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <TextField\r\n          style={{ margin: 5 }}\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          name=\"username\"\r\n          variant=\"outlined\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n          autoFocus\r\n        />\r\n        <br />\r\n\r\n        <TextField\r\n          style={{ margin: 5 }}\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          variant=\"outlined\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          onKeyDown={handlePasswordKeyDown}\r\n          required\r\n          autoFocus\r\n        />\r\n        <br />\r\n        <Button style={{ margin: 5 }} variant=\"outlined\" onClick={handleSubmit} disabled={submitEnabled()} >Login</Button>\r\n        <br />\r\n        {loginStatus.isError && <div>{loginStatus.error?.toString()}</div>}\r\n      </form>\r\n    </div>\r\n\r\n  );\r\n}","import { Switch, Route, useLocation } from 'react-router-dom';\r\nimport { ShowWords } from './ShowWords';\r\nimport { ShowLists } from './ShowLists';\r\nimport { Login } from './login'\r\n\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport function Main() {\r\n    let query = useQuery();\r\n    return (\r\n        <Switch>\r\n            <Route path='/login' >\r\n                <Login />\r\n            </Route>\r\n            <Route path='/dashboard' >\r\n                dashboard\r\n            </Route>\r\n            <Route path='/showwords' >\r\n                <ShowWords listName={query.get(\"listname\")!} />\r\n            </Route>\r\n            <Route path='/showlists' >\r\n                <ShowLists />\r\n            </Route>\r\n            <Route path='/createlist' >\r\n                createlist\r\n            </Route>\r\n            <Route path='/addwordtolist' >\r\n                addwordtolist\r\n            </Route>\r\n            <Route path='/settings' >\r\n                settings\r\n            </Route>\r\n            <Route path='/account' >\r\n                account\r\n            </Route>\r\n            <Route path='/' >\r\n                Main\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    secondary?: string;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nexport function ListItemLink(props: ListItemLinkProps) {\r\n    const { icon, primary, to, secondary } = props;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <ListItemText primary={primary} secondary={secondary} />\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles, Theme, Drawer, List, Divider } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport AccountIcon from '@material-ui/icons/AccountCircle'\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport { ListItemLink } from '../utils/ListItemLink';\r\n\r\nconst useStylesTopBar = makeStyles((theme: Theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    bgColor: {\r\n        background: 'black'\r\n    },\r\n    drawer: { width: 250 },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    accountDrawer: { width: 200 },\r\n    accountDrawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    }\r\n}));\r\n\r\nexport function TopBar() {\r\n    const classes = useStylesTopBar();\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n    const toggleDrawerOpen = () => setIsDrawerOpen(!isDrawerOpen);\r\n\r\n    const [isAccountDrawerOpen, setIsAccountDrawerOpen] = useState(false);\r\n    const toggleAccountDrawerOpen = () => setIsAccountDrawerOpen(!isAccountDrawerOpen);\r\n    const handleDrawerClose = () => {\r\n        isDrawerOpen && setIsDrawerOpen(false);\r\n        isAccountDrawerOpen && setIsAccountDrawerOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleDrawerClose}>\r\n            <AppBar position=\"static\" className={classes.bgColor}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawerOpen}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        GRE Tool\r\n                    </Typography>\r\n                    <IconButton onClick={toggleAccountDrawerOpen}>\r\n                        <AccountIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer classes={{ paper: classes.drawer }} className={classes.drawer} anchor={\"left\"} open={isDrawerOpen}  >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={toggleDrawerOpen}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItemLink to=\"/dashboard\" primary=\"Dashboard\" />\r\n                    <ListItemLink to=\"/showwords\" primary=\"Show Words\" />\r\n                    <ListItemLink to=\"/showlists\" primary=\"Show Lists\" />\r\n                    <Divider />\r\n                    <ListItemLink to=\"/createlist\" primary=\"Create List\" />\r\n                    <ListItemLink to=\"/addwordtolist\" primary=\"Add to List\" />\r\n\r\n                </List>\r\n            </Drawer>\r\n            <Drawer classes={{ paper: classes.accountDrawer }} className={classes.accountDrawer} anchor={\"right\"} open={isAccountDrawerOpen}  >\r\n                <div className={classes.accountDrawerHeader}>\r\n                    <IconButton onClick={toggleAccountDrawerOpen}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItemLink to=\"/login\" primary=\"Login\" icon={<LockOpenIcon />} />\r\n                    <ListItemLink to=\"/settings\" primary=\"Settings\" icon={<SettingsIcon />} />\r\n                    <ListItemLink to=\"/account\" primary=\"Account\" icon={<LockIcon />} />\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createMuiTheme, CssBaseline } from '@material-ui/core'\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { Main } from './components/main'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Container } from '@material-ui/core';\r\nimport { TopBar } from './components/TopBar';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  },\r\n});\r\n\r\nconst SW = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <BrowserRouter>\r\n      <TopBar />\r\n      <Container style={{ marginTop: \"20px\" }}>\r\n        <Main />\r\n      </Container>\r\n    </BrowserRouter>\r\n\r\n  </ThemeProvider>\r\n);\r\n\r\n\r\nReactDOM.render(<SW />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}